'use strict';
import Promise from 'bluebird';
import merito_img_aircraft_models from '../seeders-media/aircraft.json';
import merito_aircraft_models from '../seeders-media/merito_aircraft_models.json';
import path from 'path';
import fs from 'fs';
import AWS from 'aws-sdk';
import slugify from '../../core/generateSlug';
import {
  SFAircraftModel,
  SFAircraftManufacturer,
  SFAircraftCategory,
  Post,
  Term,
  TermTaxonomy,
  MediaLibrary,
  MediaTranslation,
  Language,
  User,
} from '../models';
import Sequelize from '../sequelize';
import { POINT_CONVERSION_COMPRESSED } from 'constants';

const aws = {
  bucket: process.env.CF_ENDPOINT || 'lnjt-staging',
  keys: {
    accessKeyId: process.env.AWS_ACCESS_KEY || 'AKIAJEIH3LA6MCLG5YGQ',
    secretAccessKey: process.env.AWS_SECRET_KEY || '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',
    region: process.env.AWS_REGION || 'eu-west-1',
  },
  cloudFront: {
    endpoint: process.env.AWS_CF_ENDPOINT || 'd2senxzasulqn5.cloudfront.net',
  },
};

const filename = path.basename(__filename);

const DESCRIPTION = `Auto generated by seed name: ${filename}`;
const AWS_PATH = `https://s3-${aws.keys.region}.amazonaws.com/${aws.bucket}/`;
const THUMBNAILS_PREFIX = 'thumbnails/';
const ORIGINAL_PREFIX = 'original/';

AWS.config.setPromisesDependency(Promise);
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

module.exports = {
  
  up: async (queryInterface, Sequelize) => {

    const author = await User.findOne();
    // Migrate them one by one only
    const langs = await Language.findAll({ where: { locale: {
      $in: ["en", "fr", "de", "ru", "it", "hu", "es", "pl"]
    } } });

    let imageLibrary = [];
    let upload = 0;
    let notUpload = 0;
    let newlyUpload = 0;
    
    await Promise.map(langs, async (lang) => {
      // console.log ("Locales   => ", lang.locale);
      const merito_img_aircraft_models_locale = Object.entries(merito_img_aircraft_models).find (aircraftList => {
        return aircraftList[0] === lang.locale;
      });
      const example = [Object.entries(merito_img_aircraft_models_locale[1])[3]];
      // console.log ("merito_img_aircraft_models_locale for langggggggggggggggggg => ", lang.locale);
      await Promise.map (Object.entries(merito_img_aircraft_models_locale[1]), async (aMeritoAircraftModel) => {
        let logHeader = `[${lang.locale}]`+ `[${aMeritoAircraftModel[1].title}]`;
        console.log ("%s=======================MIGRATION STARTS!!!!!!!!! ", logHeader);
        let heroPhoto = "";
        if (aMeritoAircraftModel[1].heroPhotoPath) {
            heroPhoto = {
              type: "hero",  
              index: aMeritoAircraftModel[1].heroPhotoPath.replace("photos/","").replace(".jpeg",""),
              srcPath: "../seeders-media/" + aMeritoAircraftModel[1].heroPhotoPath,
              alt: aMeritoAircraftModel[1].heroPhotoAlt
          };
        }
        
        const aircaftId = aMeritoAircraftModel[0];
        const manufacturerFolderName = aMeritoAircraftModel[1].manufacturer;
        const aircraftModelName = aMeritoAircraftModel[1].title;
        const aircraftCategoryName = aMeritoAircraftModel[1].category;
        let galleryPhotoPath = [];
        if (aMeritoAircraftModel[1].photos) {
          galleryPhotoPath = Object.entries(aMeritoAircraftModel[1].photos).map (photo => {
            return {
              type: "sub",
              index: photo[0],
              srcPath: "../seeders-media/" + photo[1].photoPath,
              alt: photo[1].photoAlt
            }
          });
        }
        
        const aircraftModelDescription = aMeritoAircraftModel[1].description;
    
        let sfAircrafts;
        if (heroPhoto) {
          const linkedSFAircraft = merito_aircraft_models.find (aircraft => {
            return aircraft.heroShotPhotoId === heroPhoto.index;
          })
          if (linkedSFAircraft) {
            sfAircrafts = await SFAircraftModel.findOne({
              where: {
                name: linkedSFAircraft.sf_name
              }
            });
          }
        }
        
        if (!heroPhoto) {
          console.log ("%s Unable to process due to missing herophoto", logHeader); 
        } else if (!sfAircrafts) {
          console.log ("%s Unable to link with sf object", logHeader);
        } else if (!galleryPhotoPath) {
          console.log ("%s Gallery photo is empty", logHeader);
        } else if (!manufacturerFolderName) {
          console.log ("%s Gallery photo is empty", logHeader);
        } else if (!aircraftModelName) {
          console.log ("%s Gallery photo is empty", logHeader);
        } else {
          console.log ("%s Good, Let's go migrate", logHeader);
          
          const s3 = new AWS.S3(aws.keys); // AMAZON AWS S3 INSTANCE
          const files = galleryPhotoPath.concat ([heroPhoto]);
          //// console.log ("all images are => ", files);

          // Update on AWS server
          const images = await Promise.map(files, async (file) => {
            if (file.srcPath) {
              const imagePath = path.resolve(__dirname, file.srcPath); // get path from source
              const srcFileName = path.basename(imagePath); // get base filename
              const fileName = srcFileName.replace("jpeg", "jpg");
              //// console.log ("Filename =>%s ", fileName);
              //// console.log ("srcFileName =>%s ", srcFileName);
              const image = fs.readFileSync(imagePath);
              const manu = slugify(manufacturerFolderName, { lower: true, remove: /[$*^`´|_§#€?&$+~.%=()'"!,\\/\:@]/i });
              const model = slugify(aircraftModelName, { lower: true, remove: /[$*^`´|_§#€?&$+~.%=()'"!,\\/\:@]/i });
              let keyFolder;
              let keyFile;
              if (file.type === 'hero') {
                 keyFolder = `aircrafts/${manu}/${model}`;
                 keyFile = `aircrafts/${manu}/${model}/${fileName}`;
              } else {
                 keyFolder = `aircrafts/${manu}/${model}/gallery`;
                 keyFile = `aircrafts/${manu}/${model}/gallery/${fileName}`;
              }
              let needUpload = false;
              let info
              // Check if image has already been uploaded in right format
              try {
                info = await s3.headObject({
                  Bucket: aws.bucket,
                  Key: keyFile,
                }).promise();
  
                //// console.log ("INFFOOOOOOO of key %s ", keyFile);
                //// console.log ("Info is => ", info);
                if (info.ContentType !== "image/jpeg") {
                  console.log ("%s Deleting key %s of wrong format %s and upload again" , logHeader, keyFile, info.ContentType);
                  await s3.deleteObject({
                    Bucket: aws.bucket,
                    Key: keyFile,
                  }).promise();
                  needUpload = true;
                } else {
                  upload = upload + 1;
                  //// console.log ("Info => ", info);
                  console.log ("[%s/%s/%s] Existing key %s of size %s" , upload, notUpload, newlyUpload, keyFile, info.ContentLength);
                }
  
              } catch (e) {
                if (e.statusCode == 404) {
                  console.log ("%s Key %s doesn't exist. Will upload it!", logHeader, keyFile);
                  needUpload = true;
                } else {
                  console.log ("%s% ERROR IN CHECKING KEY %s  => %s",logHeader, keyFile, e);
                }
                
              }

              if (needUpload) {
                
                while (needUpload) {
                  if (notUpload < 3) {
                    notUpload = notUpload + 1;
                    console.log ("%s [%s/%s/%s] Uploading key  %s which doesn't exist", logHeader, upload, notUpload, newlyUpload, keyFile);
                    info = await s3.putObject({
                      Bucket: aws.bucket,
                      Key: keyFile,
                      Body: image,
                      ContentType: "image/jpeg",
                      ACL: 'public-read',
                    }).promise();
                    notUpload = notUpload - 1;
                    newlyUpload = newlyUpload + 1;
                    needUpload = false;
                    console.log ("%s [%s/%s/%s] Done uploaded key  %s", logHeader, upload, notUpload, newlyUpload, keyFile);
                  } else {
                    
                    await sleep(10000);
                    
                  }
                }  

                info = await s3.headObject({
                  Bucket: aws.bucket,
                  Key: keyFile,
                }).promise();    

                /*
                // console.log ("Get the key  %s info of new image => ", keyFile);
                info = await s3.getObject({
                  Bucket: aws.bucket,
                  Key: keyFile,
                }).promise();
                */
              }
              
              return {
                ...file,
                ...info,
                Key: keyFile,
                fileName,
              };
            } else {
              return {
                ...file
              };

            }
          });
        

          //// console.log ("Image lists related  => ", images);
          
          const aircraftImages = await Promise.map(images, async(img) => {
            if (img && img.Key) {
              let media = await MediaLibrary.findOne({
                where: {
                  src: AWS_PATH + img.Key
                }
              });
              if (!media) {
                console.log ("Non existing media in library => ", AWS_PATH + img.Key);
                media = await MediaLibrary.create({
                  src: AWS_PATH + img.Key,
                  original: AWS_PATH + ORIGINAL_PREFIX + img.Key,
                  key: img.Key,
                  filename: img.fileName,
                  mimetype: img.ContentType,
                  size: img.ContentLength,
                  thumbnail: AWS_PATH + THUMBNAILS_PREFIX + img.Key,      
                });
              }
              
              // console.log ("Media => ", media.id);
              await MediaTranslation.create({
                alt: img.alt,
                language_id: lang.id,
                media_id: media.id,
              });
              return {
                ...img,
                media_id: media.id
              };
              // await media.setTranslation(alt)
            }

          });
          
          imageLibrary  = imageLibrary.concat (await Promise.map(aircraftImages, async(img) => {
            return img.Key;
          }));

          // console.log ("Image imported are => ", aircraftImages[0].media_id);
          const galleryList = await Promise.map(aircraftImages.filter(img => {
            return img.type === "sub";
          }), async (img) => {
            return {
              id : img.media_id
            }
          });
          const aircraft = await Post.create({
            post_id: 'ac' + aircaftId,
            title: aircraftModelName,
            slug: slugify(aircraftModelName, { lower: true, remove: /[$*^`´|_§#€?&$+~.%=()'"!,\\/\:@]/i }),
            summary: aircraftModelName + ", " + aircraftCategoryName + ", " + manufacturerFolderName,
            meta: {
              aircraft_sfid: sfAircrafts.sfid,
              template: 'aircraft-details',
              featured: false,
              manufacturer: sfAircrafts.manufacturer__c,
              category: sfAircrafts.aircraft_categories__c,
              aircraft_gallery: galleryList,
              similar_aircraft_list: [],
            },
            body: {
              main : "{\n  \"entityMap\": {},\n  \"blocks\": [\n    {\n      \"key\": \"fee9p\",\n      \"text\": \"" + aircraftModelDescription + "\",\n      \"type\": \"unstyled\",\n      \"depth\": 0,\n      \"inlineStyleRanges\": [],\n      \"entityRanges\": [],\n      \"data\": {}\n    }\n  ]\n}",        
            },
            state: 'published',
            type: 'aircraft',
            published: true,
            user_id: author.id,
            language_id: lang.id,
            media_id: aircraftImages.find (img => {
              return img.type === "hero";
            }).media_id,
          });
          
        }
      });
      // console.log ("final list => ", imageLibrary);
    });
  },

  down: async (queryInterface, Sequelize) => {
    await Post.destroy({ where: { type: 'aircraft'}, cascade: true, force: true });

    const s3 = new AWS.S3(aws.keys); // AMAZON AWS S3 INSTANCE
    /*
    const keyFolder = `public/seeders/aircrafts`;
    const info = await s3.deleteObject({
        Bucket: aws.bucket,
        Key: keyFolder,
      }).promise();
*/
    //// console.log ("info of key => ", info);
  }
};
