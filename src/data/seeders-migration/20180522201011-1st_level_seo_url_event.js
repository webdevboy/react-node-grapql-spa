import Promise from 'bluebird';
import path from 'path';
import { StringTranslation, Language, Post, SFAircraftManufacturer} from '../models';
import slugify from '../../core/generateSlug';

const filename = path.basename(__filename);
const DESCRIPTION = `Auto generated by seed name: ${filename}`;

export default {
  up: async (queryInterface) => {

    const sequelize = queryInterface.sequelize;
    const en = await Language.findOne({ where: { locale: 'en' } });
    const fr = await Language.findOne({ where: { locale: 'fr' } });
    const de = await Language.findOne({ where: { locale: 'de' } });
    const ru = await Language.findOne({ where: { locale: 'ru' } });
    const it = await Language.findOne({ where: { locale: 'it' } });
    const hu = await Language.findOne({ where: { locale: 'hu' } });
    const es = await Language.findOne({ where: { locale: 'es' } });
    const pl = await Language.findOne({ where: { locale: 'pl' } });

    const langList = await Language.findAll({ where: { locale: {
      $in: ['en', "fr", "de" ,"ru", "it", "hu", "es", "pl"]
    } } });

    const seoUrls = [
      {
        lang: en,
        slug: "fly-to-events",
        title: "Fly To Events"
      },
      {
        lang: fr,
        slug: "evenements-en-jet-prive",
        title: "Evenements En Jet Prive"
      },
      {
        lang: de,
        slug: "fliegen-sie-zu-veranstaltungen",
        title: "Fliegen Sie Zu Veranstaltungen"
      },
      {
        lang: it,
        slug: "vola-agli-eventi",
        title: "Vola Agli Eventi"
      },
      {
        lang: ru,
        slug: "letat-na-meropriyatiya",
        title: "Letat Na Meropriyatiya"
      },
      {
        lang: pl,
        slug: "latac-na-wydarzenia",
        title: "Latac Na Wydarzenia"
      },
      {
        lang: hu,
        slug: "repulni-az-esemenyekre",
        title: "Repulni Az Esemenyekre"
      },
      {
        lang: es,
        slug: "volar-a-eventos",
        title: "Volar A Eventos"
      },
    ]

    const sfAircraftManufacturers = await SFAircraftManufacturer.findAll();
    const sfManuNameList = await Promise.map (sfAircraftManufacturers, async (manu) => {
      return manu.name;
    });

    // Find the reference post of fleet page
    const refPost = await Post.findAll ({
      where: {
        language_id: en.id,
        meta: {
          template: "evergreen"
        }
      }
    });

    if (refPost.length !== 1) {
      console.log ("[Error] Found %s page(s) of reference post. Please update the db first.", refPost.length);
    } else {
      
      const refPostId = refPost[0].post_id;
      console.log ("Found reference post for fleet page: ", refPostId);

      await Promise.each(seoUrls, async (url) => {
        let logHeader = `[${url.lang.locale}]`
        let fleetPost;
        // Check 1st level page exist
        const fleetPosts = await Post.findAll ({
          where: {
            language_id: url.lang.id,
            meta: {
              template: "evergreen"
            }
          }
        });
        if (fleetPosts.length === 0) {
          console.log ("%s [Error] Not found template fleet. Will duplicate content from reference post", logHeader);
          fleetPost = await Post.create ({
            post_id: refPostId,
            title: url.title,
            slug: url.slug,
            body: refPost[0].body,
            meta: refPost[0].meta,
            publish_at: refPost[0].publish_at,
            state: "draft",
            type: "page",
            language_id: url.lang.id,
            user_id: refPost[0].user_id,
            media_id: refPost[0].media_id
          });
        } else if   (fleetPosts.length > 1) {
          console.log ("%s [Error] Found %s pages of template fleet. Please clean the db first.", logHeader, fleetPosts.length);
          return null;
        } else {
          console.log ("%s Slug of page [%s]=>[%s]", logHeader, fleetPosts[0].slug, url.slug);
          if (url.slug !== fleetPosts[0].slug) {
            console.log ("%s Updating slug of page [%s]=>[%s]", logHeader, fleetPosts[0].slug, url.slug);
            await fleetPosts[0].update ({slug: url.slug});
          }
          fleetPost = fleetPosts[0];
        }

        const aircraftList = await Post.findAll ({
          where: {
            language_id: url.lang.id,
            type: "event",
          }
        })
        //console.log ("%s => %s",aircraft.title, newAircraftName );
        

        await Promise.each(aircraftList, async (aircraft) => {
          const newMeta = {
            ...aircraft.meta,
            pathUrl: {
              [fleetPost.id]: fleetPost.slug,
            },
          };
          await aircraft.update (
            {
              meta: newMeta,
            }
          );
      });

/*
          // Check 2nd level page exist
          const manuPosts = await Post.findAll ({
            where: {
              language_id: url.lang.id,
              meta: {
                template: "private-jet-charter-manufacturer",
                pathUrl: {
                  [fleetPost.id]: fleetPost.slug
                },
                manufacturer_sfid: sfManu.sfid,
              }
            }
          });
          if (manuPosts.length === 0) {
            console.log ("%s [Error] Not found template PJC Manufacturer. Will create content", logHeader);
           
            pjcDestinationPost = await Post.create ({
              
              title: url.title,
              slug: url.slug,
              body: refPost[0].body,
              meta: refPost[0].meta,
              publish_at: refPost[0].publish_at,
              state: "draft",
              type: "page",
              language_id: url.lang.id,
              user_id: refPost[0].user_id,
              media_id: refPost[0].media_id
            });
            
          } else if (manuPosts.length > 1) {
            console.log ("%s Found %s pages of template PJC Manufacturer. Please clean the db first.", logHeader, manuPosts.length);
          } else {
            console.log ("%s Ffffffffffffffffffffffffffound 1 page of template PJC Manufacturer");
          }
          */
        });
    }    
  },

  down: async () => {
    await Post.destroy ({
      where: {
        post_id : {
          $like: 'pjcm%'
        }
      },
      force: true
    });
  }
};