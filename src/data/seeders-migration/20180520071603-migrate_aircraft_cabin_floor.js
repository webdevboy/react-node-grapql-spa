'use strict';
import Promise from 'bluebird';
import merito_img_aircraft_models from '../seeders-media/aircraft.json';
import merito_aircraft_cabin_floor from '../seeders-media/aircraft_cabin_floor.json';
import merito_aircraft_models from '../seeders-media/merito_aircraft_models.json';
import path from 'path';
import fs from 'fs';
import AWS from 'aws-sdk';
import slugify from '../../core/generateSlug';
import {
  SFAircraftModel,
  SFAircraftManufacturer,
  SFAircraftCategory,
  Post,
  Term,
  TermTaxonomy,
  MediaLibrary,
  MediaTranslation,
  Language,
  User,
} from '../models';
import Sequelize from '../sequelize';
import { POINT_CONVERSION_COMPRESSED } from 'constants';

const aws = {
  bucket: process.env.CF_ENDPOINT || 'lnjt-prod',
  keys: {
    accessKeyId: process.env.AWS_ACCESS_KEY || 'AKIAJEIH3LA6MCLG5YGQ',
    secretAccessKey: process.env.AWS_SECRET_KEY || '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',
    region: process.env.AWS_REGION || 'eu-west-1',
  },
  cloudFront: {
    endpoint: process.env.AWS_CF_ENDPOINT || 'd2senxzasulqn5.cloudfront.net',
  },
};

const filename = path.basename(__filename);

const DESCRIPTION = `Auto generated by seed name: ${filename}`;
const AWS_PATH = `https://s3-${aws.keys.region}.amazonaws.com/${aws.bucket}/`;
const THUMBNAILS_PREFIX = 'thumbnails/';
const ORIGINAL_PREFIX = 'original/';

AWS.config.setPromisesDependency(Promise);
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

module.exports = {
  
  up: async (queryInterface, Sequelize) => {

    const langs = await Language.findAll({ where: { locale: {
      $in: ["en",/* "fr", "de", "ru", "it", "hu", "es", "pl"*/]
    } } });

    let imageLibrary = [];
    let upload = 0;
    let notUpload = 0;
    let newlyUpload = 0;
    
    await Promise.map(merito_aircraft_cabin_floor, async (aircraft) => {
      
      const aircraftId = aircraft.aircraftModelId;
      const logHeader = `[${aircraftId}] `
      const floorImg = aircraft.floorPlanePhotoId;
      const cabinImg = aircraft.cabinView.replace("jpg", "svg");
      if (!aircraftId || !floorImg || !cabinImg) {
        console.log ("One of the main element doesn't exist");
      } else {
        console.log ("All good, start to update cabin and floor image");
        const floorImgPath = path.resolve(__dirname, "../seeders-media/photos/" + floorImg + ".jpeg");
        const cabinImgPath = path.resolve(__dirname, "../seeders-media/photos/" + cabinImg);

        if (!fs.existsSync(floorImgPath)) {
          console.log ("Missing floor image %s of aircraft %s", floorImgPath, aircraftId);
        } else {
          console.log ("Floor image exsits");
        }

        if (!fs.existsSync(cabinImgPath)) {
          console.log ("Missing floor image %s of aircraft %s", cabinImgPath, aircraftId);
        } else {
          console.log ("Cabin image exists");
        }
        const floorPhoto = {
          type: "floor",
          srcPath: floorImgPath,
        }
        const cabinPhoto = {
          type: "cabin",
          srcPath: cabinImgPath
        }
        const s3 = new AWS.S3(aws.keys); // AMAZON AWS S3 INSTANCE
        const files = [floorPhoto, cabinPhoto]
        
        // Update on AWS server
        const images = await Promise.map(files, async (file) => {
          if (file.srcPath) {
            const srcFileName = path.basename(file.srcPath); // get base filename
            const fileName = srcFileName.replace("jpeg", "png");

            console.log ("Filename =>%s ", fileName);
            console.log ("srcFileName =>%s ", srcFileName);
            const image = fs.readFileSync(file.srcPath);
            let keyFolder;
            let keyFile;
            let targetContentType;
            if (file.type === 'cabin') {
               keyFolder = `aircrafts/cabin-view`;
               keyFile = `aircrafts/cabin-view/${fileName}`;
               targetContentType = "image/svg+xml";
            } else {
               keyFolder = `aircrafts/floor-map`;
               keyFile = `aircrafts/floor-map/${fileName}`;
               targetContentType = "image/png";
            }

            let needUpload = false;
            let info
            // Check if image has already been uploaded in right format
            try {
              info = await s3.headObject({
                Bucket: aws.bucket,
                Key: keyFile,
              }).promise();

              //// console.log ("INFFOOOOOOO of key %s ", keyFile);
              //// console.log ("Info is => ", info);

              if (info.ContentType !== targetContentType) {
                console.log ("%s Deleting key %s of wrong format %s and upload again" , logHeader, keyFile, info.ContentType);
                await s3.deleteObject({
                  Bucket: aws.bucket,
                  Key: keyFile,
                }).promise();
                needUpload = true;
              } else {
                upload = upload + 1;
                //// console.log ("Info => ", info);
                console.log ("[%s/%s/%s] Existing key %s of size %s" , upload, notUpload, newlyUpload, keyFile, info.ContentLength);
              }

            } catch (e) {
              if (e.statusCode == 404) {
                console.log ("%s Key %s doesn't exist. Will upload it!", logHeader, keyFile);
                needUpload = true;
              } else {
                console.log ("%s% ERROR IN CHECKING KEY %s  => %s",logHeader, keyFile, e);
              }
              
            }

            if (needUpload) {
              
              while (needUpload) {
                if (notUpload < 3) {
                  notUpload = notUpload + 1;
                  console.log ("%s [%s/%s/%s] Uploading key  %s which doesn't exist", logHeader, upload, notUpload, newlyUpload, keyFile);
                  info = await s3.putObject({
                    Bucket: aws.bucket,
                    Key: keyFile,
                    Body: image,
                    ContentType: targetContentType,
                    ACL: 'public-read',
                  }).promise();
                  notUpload = notUpload - 1;
                  newlyUpload = newlyUpload + 1;
                  needUpload = false;
                  console.log ("%s [%s/%s/%s] Done uploaded key  %s", logHeader, upload, notUpload, newlyUpload, keyFile);
                } else {
                  
                  await sleep(10000);
                  
                }
              }  

              info = await s3.headObject({
                Bucket: aws.bucket,
                Key: keyFile,
              }).promise();    

              /*
              // console.log ("Get the key  %s info of new image => ", keyFile);
              info = await s3.getObject({
                Bucket: aws.bucket,
                Key: keyFile,
              }).promise();
              */
            }
            
            return {
              ...file,
              ...info,
              Key: keyFile,
              fileName,
            };
          } else {
            return {
              ...file
            };

          }
        });

        console.log ("Images list at the end => ", images);

        const imagesWithId = await Promise.map(images, async(img) => {
          if (img && img.Key) {
            let media = await MediaLibrary.findOne({
              where: {
                src: AWS_PATH + img.Key
              }
            });
            if (!media) {
              console.log ("Non existing media in library => ", AWS_PATH + img.Key);
              media = await MediaLibrary.create({
                src: AWS_PATH + img.Key,
                original: AWS_PATH + ORIGINAL_PREFIX + img.Key,
                key: img.Key,
                filename: img.fileName,
                mimetype: img.ContentType,
                size: img.ContentLength,
                thumbnail: AWS_PATH + THUMBNAILS_PREFIX + img.Key,      
              });
            }

            return {
              ...img,
              media_id: media.id,
              src: AWS_PATH + img.Key
            }; 
          }

        });
        const aircrafts = await Post.findAll({where: {
          post_id : "ac" + aircraftId,
          type: "aircraft"
        }});

        if (!aircrafts) {
          console.log ("NO AIRCRAFT FOUND");
        } else {
        }
        await Promise.all(
        aircrafts.map( async(aircraft) => {

          const floor = {}
          const newMeta = {
            ...aircraft.meta,
            floor_map_image: {
              id: imagesWithId[0].media_id,
              src:imagesWithId[0].src
            },
            cabin_view_image: {
              id: imagesWithId[1].media_id,
              src:imagesWithId[1].src
            }
          };
          await aircraft.update({ meta: newMeta});  
        }));

        console.log ("=========================================================")
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    //await Post.destroy({ where: { type: 'aircraft'}, cascade: true, force: true });

    const s3 = new AWS.S3(aws.keys); // AMAZON AWS S3 INSTANCE
    /*
    const keyFolder = `public/seeders/aircrafts`;
    const info = await s3.deleteObject({
        Bucket: aws.bucket,
        Key: keyFolder,
      }).promise();
*/
    //// console.log ("info of key => ", info);
  }
};
