'use strict';
import Promise from 'bluebird';
import merito_event from '../seeders-media/events-missing-IATAS.json';
import path from 'path';
import fs from 'fs';
import AWS from 'aws-sdk';
import slugify from '../../core/generateSlug';
import {
  SFAircraftModel,
  SFAircraftManufacturer,
  SFAircraftCategory,
  Post,
  Term,
  TermTaxonomy,
  MediaLibrary,
  MediaTranslation,
  Language,
  SFAirportCity,
  SFAirport,
  User,
} from '../models';
import Sequelize from '../sequelize';

const aws = {
  bucket: process.env.CF_ENDPOINT || 'lnjt-staging',
  keys: {
    accessKeyId: process.env.AWS_ACCESS_KEY || 'AKIAJEIH3LA6MCLG5YGQ',
    secretAccessKey: process.env.AWS_SECRET_KEY || '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',
    region: process.env.AWS_REGION || 'eu-west-1',
  },
  cloudFront: {
    endpoint: process.env.AWS_CF_ENDPOINT || 'd2senxzasulqn5.cloudfront.net',
  },
};

const filename = path.basename(__filename);

const DESCRIPTION = `Auto generated by seed name: ${filename}`;
const AWS_PATH = `https://s3-${aws.keys.region}.amazonaws.com/${aws.bucket}/`;
const THUMBNAILS_PREFIX = 'thumbnails/';
const ORIGINAL_PREFIX = 'original/';

AWS.config.setPromisesDependency(Promise);
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

module.exports = {
  
  up: async (queryInterface, Sequelize) => {

    const author = await User.findOne();
    
    const langs = await Language.findAll({ where: { locale: {
      $in: ['en', "fr", "de","ru", "it", "hu", "es", "pl"]
    } } });

    const nullAirportEvents = ["341", "590", "611", "614", "631", "642", "661", "688", "695", "766", "767", "531", "775"];
    let imageLibrary = [];
    let upload = 0;
    let notUpload = 0;
    let newlyUpload = 0;
    // console.log ("Language => ", langs);
    
    await Promise.map(langs, async (lang) => {
      // console.log ("Locales   => ", lang.locale);
      const merito_event_locale = Object.entries(merito_event).find (event => {
        return event[0] === lang.locale;
      });
      if (merito_event_locale) {
        console.log ("[stats] Start to migrate event of lang %s, list of % events => ",lang.locale,  Object.keys(merito_event_locale[1]).length);
        let successfulEvents = [];
        let failedEvents = [];
        await Promise.map(Object.entries(merito_event_locale[1]), async(aEvent) => {
          
          if (aEvent) {
            const eventId = aEvent[0];
            const title = aEvent[1].title;
            const eventCuriosity = aEvent[1].curiosity;
            const eventHTMLBody = aEvent[1].body;
            const eventDrafjsContent = aEvent[1].bodyJson;
            const anchor = aEvent[1].anchor;
            const photoAlt = aEvent[1].photoAlt ? aEvent[1].photoAlt : slugify(title, { lower: true, remove: /[$*^`´|_§#€?&$+~.%=()'"!,\\/\:@]/i });
            const photoPath = aEvent[1].photoPath;
            const fromDate = aEvent[1].eventDateStart;
            const toDate = aEvent[1].eventDateStop;

            if (nullAirportEvents.indexOf (eventId) === -1) {
              console.log ("Existing event, no need to migrate %s", eventId);
              return null;
            }

            let logHeader = `[${lang.locale}]`+ `[${eventId}]`;
            console.log ("%s=======================MIGRATION STARTS!!!!!!!!! ", logHeader);
        

            if (!aEvent[1].airportCodes) {
              console.log ("Unable to find an airport sfid for event %s because airportCodes empty ", eventId) ;
              failedEvents.push(eventId);
              return null;
            }
            
            const aiportCodes = aEvent[1].airportCodes.split(" ");

            let airport = await SFAirport.findOne ({ where: {
              iata_code__c: aiportCodes[0]
            }});
            
            if (!airport) {
              airport = await SFAirport.findOne ({ where: {
                icao_code__c: aiportCodes[0]
              }});
            }

            if (!airport) {
              console.log ("%s Unable to find an airport sfid for aiport ", logHeader, aiportCodes) ;
              failedEvents.push(eventId);
              return null;
            }
            
            const city = await SFAirportCity.findOne({
              where: { sfid : airport.airport_city__c }
            });
            
            if (!city) {
              console.log ("%s Unable to find a city sfid for airport  ", logHeader, aiportCodes) ;
              failedEvents.push(eventId);
              return null;
            }

            if (!eventId || !title || !eventCuriosity || !anchor || !photoAlt || !photoPath || !fromDate || !toDate) {
              console.log ("%s [WARNING] Some of the element of event is null: eventId=%s , title=%s , eventCuriosity=%s , anchor=%s , photoAlt=%s , photoPath=%s , fromDate=%s , toDate=%s ", logHeader, eventId, title, eventCuriosity, anchor, photoAlt, photoPath, fromDate, toDate) ;
            }

            //console.log ("%s All good, start to mirgate event", logHeader) ;
            // This part is to upload media on AWS server
            const s3 = new AWS.S3(aws.keys); // AMAZON AWS S3 INSTANCE
            
            const imagePath = path.resolve(__dirname, "../seeders-media/" + photoPath); // get path from source
            const srcFileName = path.basename(imagePath); // get base filename
            const fileName = srcFileName.replace("jpeg", "jpg");
            const image = fs.readFileSync(imagePath);
            
            let keyFile = `events/${fileName}`;
            
            let needUpload = false;
            let info
            // Check if image has already been uploaded in right format
            try {
              info = await s3.headObject({
                Bucket: aws.bucket,
                Key: keyFile,
              }).promise();

              if (info.ContentType !== "image/jpeg") {
                console.log ("%s Delete key %s of wrong format %s" , logHeader, keyFile, info.ContentType);
                await s3.deleteObject({
                  Bucket: aws.bucket,
                  Key: keyFile,
                }).promise();
                needUpload = true;
              } else {
                upload = upload + 1;
                //// console.log ("Info => ", info);
                console.log ("%s [%s/%s/%s] Existing key %s of size %s" , logHeader, upload, notUpload, newlyUpload, keyFile, info.ContentLength);
              }

            } catch (e) {
              if (e.statusCode == 404) {
                console.log ("%s key %s doesn't exist",logHeader, keyFile);
                needUpload = true;
              } else {
                console.log ("ERROOOORRR  => ", e);
              }
              
            }
            if (needUpload) {
              while (needUpload) {
                // Create maximum 5 thread to upload
                if (notUpload < 5) {
                  notUpload = notUpload + 1;
                  console.log ("%s [%s/%s/%s] Uploading key  %s which doesn't exist", logHeader, upload, notUpload, newlyUpload, keyFile);
                  info = await s3.putObject({
                    Bucket: aws.bucket,
                    Key: keyFile,
                    Body: image,
                    ContentType: "image/jpeg",
                    ACL: 'public-read',
                  }).promise();
                  notUpload = notUpload - 1;
                  newlyUpload = newlyUpload + 1;
                  needUpload = false;
                  console.log ("%s [%s/%s/%s] Done uploaded key  %s",logHeader, upload, notUpload, newlyUpload, keyFile);
                } else {
                  await sleep(10000);   
                }
              }

              info = await s3.headObject({
                Bucket: aws.bucket,
                Key: keyFile,
              }).promise();        
            }

            // console.log ("Key => ", info);
            let media;
            if (info && keyFile) {
              media = await MediaLibrary.findOne({
                where: {
                  src: AWS_PATH + keyFile
                }
              });
              if (!media) {
                console.log ("%s Non existing media in library. Creating one", logHeader);
                media = await MediaLibrary.create({
                  src: AWS_PATH + keyFile,
                  original: AWS_PATH + ORIGINAL_PREFIX + keyFile,
                  key: keyFile,
                  filename: fileName,
                  mimetype: info.ContentType,
                  size: info.ContentLength,
                  thumbnail: AWS_PATH + THUMBNAILS_PREFIX + keyFile,      
                });
              }
              
              console.log ("%s Media found or created=> ", logHeader, media.id);
              await MediaTranslation.create({
                alt: photoAlt,
                language_id: lang.id,
                media_id: media.id,
              });
              
            }

            // Create the post
            const eventPost = await Post.create({
              post_id: 'ev' + eventId,
              title: title,
              slug: slugify(title, { lower: true, remove: /[$*^`´|_§#€?&$+~.%=()'"!,\\/\:@]/i }),
              summary: eventCuriosity,
              meta: {
                to_date: toDate,
                website: anchor,
                template: "event-details",
                city_name: city.name,
                city_sfid: city.sfid,
                from_date: fromDate,
                featured: false
              },
              body: eventDrafjsContent,        
              state: 'published',
              type: 'event',
              published: true,
              user_id: author.id,
              language_id: lang.id,
              media_id: media.id,
            });
            successfulEvents.push(eventId);
          } else {
            console.log ("The event is empty so no migration");
          }
        });
        console.log ("[Stats] %s failed, %s successful of lang %s!", failedEvents.length, successfulEvents.length, lang.locale);
      } else {
        console.log ("event of lang %s is empty", lang.locale);
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    await Post.destroy({ where: { type: 'event', post_id: {$like: 'ev%'}}, cascade: true, force: true });

    const s3 = new AWS.S3(aws.keys); // AMAZON AWS S3 INSTANCE
    /*
    const keyFolder = `public/seeders/aircrafts`;
    const info = await s3.deleteObject({
        Bucket: aws.bucket,
        Key: keyFolder,
      }).promise();
*/
    //// console.log ("info of key => ", info);
  }
};
