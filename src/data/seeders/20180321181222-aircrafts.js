import Promise from 'bluebird';
import path from 'path';
import moment from 'moment';
import { randomBytes } from 'crypto';
import slugify from '../../core/generateSlug';
import {
  SFAircraftModel,
  SFAircraftManufacturer,
  SFAircraftCategory,
  Post,
  Term,
  TermTaxonomy,
  MediaLibrary,
  Language,
  User,
} from '../models';
import Sequelize from '../sequelize';

const filename = path.basename(__filename);
const DESCRIPTION = `Auto generated by seed name: ${filename}`;

export default {
  up: async () => {

    const author = await User.findOne();
    const en = await Language.findOne({ where: { locale: 'en', enabled: true } });

    const catImage = await MediaLibrary.findOne({ order: [Sequelize.fn('RANDOM')] });
    const manImage = await MediaLibrary.findOne({ order: [Sequelize.fn('RANDOM')] });
    const aircraftImage = await MediaLibrary.findOne({ order: [Sequelize.fn('RANDOM')] });

    const sfAircrafts = await SFAircraftModel.findAll();
    const sfAircraftCategories = await SFAircraftCategory.findAll();
    const sfAircraftManufacturers = await SFAircraftManufacturer.findAll();

    await Promise.each(sfAircraftCategories, async (sfCat) => {
      const term = await Term.create({
        name: sfCat.name,
        language_id: en.id,
        meta: {
          order: 0,
          featured: false,
          details: {
            aircraft_category_sfid: sfCat.sfid,
            price_estimate: {
              multiplier: 1.3,
              average_cost_per_hour: sfCat['price_average_cost_per_hour__c'],
            },
            range: 4000,
          },
        },
      });

      await TermTaxonomy.create({
        term_id: term.id,
        taxonomy: 'aircraft_category',
      });
    });

    await Promise.each(sfAircraftManufacturers, async (sfMan) => {
      const term = await Term.create({
        name: sfMan.name,
        language_id: en.id,
        meta: {
          order: 0,
          featured: false,
          details: {
            aircraft_manufacturer_sfid: sfMan.sfid,
            price_estimate: {
              multiplier: 1.3,
            },
            something: 4000,
            foo: 'bar',
            baz: 'hello',
          },
        },
      });
      await TermTaxonomy.create({
        term_id: term.id,
        taxonomy: 'aircraft_manufacturer',
      });

    });

    await Promise.each(sfAircrafts, async (sfModel, index) => {
      const aircraft = await Post.create({
        post_id: 'air'+index,
        title: sfModel.name,
        summary: DESCRIPTION,
        meta: {
          aircraft_sfid: sfModel.sfid,
	        template: 'aircraft-details',
          featured: false,
          manufacturer: sfModel.manufacturer__c,
		      category: sfModel.aircraft_categories__c,
		      similar_aircraft_list: [],
		      order: 1,
        },
        body: {
			sub: '',
			main : JSON.parse("{\n  \"entityMap\": {},\n  \"blocks\": [\n    {\n      \"key\": \"fee9p\",\n      \"text\": \"sadasdasd\",\n      \"type\": \"unstyled\",\n      \"depth\": 0,\n      \"inlineStyleRanges\": [],\n      \"entityRanges\": [],\n      \"data\": {}\n    }\n  ]\n}"),        
		},
		state: 'published',
        type: 'aircraft',
        published: true,
        user_id: author.id,
        language_id: en.id,
        media_id: aircraftImage.id,
      });

      const currentCat = await TermTaxonomy.findOne({
        where: {
          taxonomy: 'aircraft_category',
        },
        include: {
          model: Term,
          as: 'term',
          where: {
            'meta.details.aircraft_category_sfid': sfModel.aircraft_categories__c,
            language_id: en.id,
          }
        }
      });

      const currentMan = await TermTaxonomy.findOne({
        where: {
          taxonomy: 'aircraft_manufacturer',
        },
        include: {
          model: Term,
          as: 'term',
          where: {
            'meta.details.aircraft_manufacturer_sfid': sfModel.manufacturer__c,
            language_id: en.id,
          }
        }
      });

      if (currentCat) {
        // console.log('CURRENT CATEGORY => ',currentCat);
        await aircraft.addTaxonomy(currentCat);
      }
      if (currentMan) {
        // console.log('CURRENT MANUFACTURER => ',currentMan);
        await aircraft.addTaxonomy(currentMan);
      }

    });


  },
  down: async () => {
    const sfAircraftCategories = await SFAircraftCategory.findAll();
    const sfAircraftManufacturers = await SFAircraftManufacturer.findAll();
    
    await Post.destroy({
      where: {
        type: 'aircraft',
      },
      cascade: true,
      force: true,
    });

    await TermTaxonomy.destroy({
      where: {
        taxonomy: {
          $in: ['aircraft_category', 'aircraft_manufacturer']
        }
      },
      include: [
        {
          model: Term,
          as: 'Term',
        },
      ]
    })

    await Term.destroy({
      where: {
        name: {
          $in: [
            ...sfAircraftCategories.map(({ name }) => name),
            ...sfAircraftManufacturers.map(({ name }) => name),
          ],
        },
      },
      cascade: true,
    });



  }
};