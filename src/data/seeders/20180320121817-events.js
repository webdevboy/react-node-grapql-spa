import Promise from 'bluebird';
import path from 'path';
import moment from 'moment';
import slugify from '../../core/generateSlug';
import {
  SFAirportCity,
  MediaLibrary,
  Post,
  Term,
  TermTaxonomy,
  Language,
  User,
} from '../models';

const filename = path.basename(__filename);
const DESCRIPTION = `Auto generated by seed name: ${filename}`;
const event_categories = ['Cinema', 'Motors', 'Webinar', 'Congress', 'Festival', 'Concert'];
const music_taxonomy_parent = 'Music';
const music_taxonomy_childrens = ['Jazz', 'Rock', 'Pop'];

export default {
  up: async () => {

    const author = await User.findOne();
    const en = await Language.findOne({ where: { locale: 'en', enabled: true } });
    const city = await SFAirportCity.findOne({ offset: 19 });
    const image = await MediaLibrary.findOne();

    const music = await Term.create({
      name: music_taxonomy_parent,
      // slug is generated on before Hook on Term model
      language_id: en.id,
    });
    const music_taxonomy = await TermTaxonomy.create({
      term_id: music.id,
      taxonomy: 'event_category',
    });

    await Promise.map(music_taxonomy_childrens, async (cat) => {
      const term = await Term.create({
        name: cat,
        // slug is generated on before Hook on Term model
        language_id: en.id,
      });
      const tax = await TermTaxonomy.create({
        term_id: term.id,
        taxonomy: 'event_category',
        parent_id: music.id,
      });

      // await tax.setParent();
      return tax;
    });

    await Promise.map(event_categories, async (cat) => {
      const term = await Term.create({
        name: cat,
        // slug is generated on before Hook on Term model
        language_id: en.id,
      });
      const tax = await TermTaxonomy.create({
        term_id: term.id,
        taxonomy: 'event_category',
      });
      return tax;
    });

    const music_event = await Post.create({
      post_id: 'asdf4t4',
      title: `Justin Bieber At ${city['name_' + en.locale + '__c']} Music Hall`,
      summary: DESCRIPTION,
      body: JSON.parse("{\n  \"entityMap\": {},\n  \"blocks\": [\n    {\n      \"key\": \"fee9p\",\n      \"text\": \"sadasdasd\",\n      \"type\": \"unstyled\",\n      \"depth\": 0,\n      \"inlineStyleRanges\": [],\n      \"entityRanges\": [],\n      \"data\": {}\n    }\n  ]\n}"),
      meta: {
        airport_city_sfid: city.sfid,
        from_date: moment().add(8, 'days').calendar(),
        until_date: moment().add(1, 'week').calendar(),
        display_helicopter_transfer: true,
      },
      state: 'published',
      type: 'event',
      user_id: author.id,
      language_id: en.id,
      media_id: image.id,
    });

    const taxonomiss = await TermTaxonomy.findAll({
      where: {
        taxonomy: 'event_category',
      },
      include: [{
        model: Term,
        as: 'term',
        where: {
          slug: {
            $in: ['concert', 'pop', 'music']
          },
          language_id: en.id,
        }
      }]
    });

    console.log('TAXONOMIES =>' ,taxonomiss);

    await music_event.addTaxonomies(taxonomiss);

  },
  down: async () => {
    await Post.destroy({ where: { type: 'event' }, cascade: true });
    // await TermTaxonomy.destroy({ where: { taxonomy: { $in: ['event_category'] } }, cascade: true });
    // await Term.destroy({
    //   where: {
    //     slug: {
    //       $in: [
    //         slugify(music_taxonomy_parent),
    //         ...event_categories.map(tag => slugify(tag)),
    //         ...music_taxonomy_childrens.map(tag => slugify(tag)),
    //       ],
    //     },
    //   },
    //   cascade: true,
    // });
  },
};
