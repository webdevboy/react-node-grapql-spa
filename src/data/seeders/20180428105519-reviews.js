import path from 'path';
import Promise from 'bluebird';
import {
  SFAirport,
  SFAirportCity,
  MediaLibrary,
  Language,
  Post,
  Term,
  TermTaxonomy,
  User
} from '../models';
import slugify from '../../core/generateSlug';
import Sequelize from '../sequelize';

const filename = path.basename(__filename);
const DESCRIPTION = `Auto generated by seed name: ${filename}`;

export default {
  up: async () => {

    // author ====
    const author = await User.findOne();
    // languages ====
    const en = await Language.findOne({ where: { locale: 'en' } });
    const fr = await Language.findOne({ where: { locale: 'fr' } });

    const from_airport = await SFAirport.findOne({ order: Sequelize.fn('RANDOM'), includes: [{ model: SFAirportCity, as: 'city' }] });
    const to_airport = await SFAirport.findOne({ order: Sequelize.fn('RANDOM'), includes: [{ model: SFAirportCity, as: 'city' }] });

    // image ====
    const image = await MediaLibrary.findOne({ order: Sequelize.fn('RANDOM') });
    // ENGLISH

    // page
    await Post.create({
      title: 'Testimonials',
      post_id: 'r3vws',
      meta: {
        template: 'testimonials',
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      language_id: en.id,
      summary: DESCRIPTION,
    });

    // page fr
    await Post.create({
      title: 'Testimonials FR',
      post_id: 'r3vws',
      meta: {
        template: 'testimonials',
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      language_id: fr.id,
      summary: DESCRIPTION,
    });


    // reviews / testimonials
    await Post.create({
      title: 'Rate 5 star service from LTN - LBG',
      post_id: 'r3vws1',
      meta: {
        template: 'review',
        review: 'I choose you guys as usual, lorem ipsum dolor sit amet',
        details: {
          from_airport, // we can make this insert on backoffice, no need to make extra query to get the relation
          to_airport,
          date: Date.now(),
        },
      },
      type: 'review', // type review
      state: 'published',
      user_id: author.id,
      language_id: en.id,
      summary: DESCRIPTION,
    });


    // reviews / testimonials
    await Post.create({
      title: 'Rate 5 star service from LTN - LBG FR',
      post_id: 'r3vws1',
      meta: {
        template: 'review',
        review: 'I choose you guys as usual, lorem ipsum dolor sit amet',
        details: {
          from_airport,
          to_airport,
          date: Date.now(),
        },
      },
      type: 'review', // type review
      state: 'published',
      user_id: author.id,
      language_id: fr.id,
      summary: DESCRIPTION,
    });

    // reviews / testimonials
    await Post.create({
      title: 'Loved the experience',
      post_id: 'r3vws2',
      meta: {
        template: 'review',
        review: 'I choose you guys as usual, lorem ipsum dolor sit amet',
        details: {
          from_airport, // we can make this insert on backoffice, no need to make extra query to get the relation
          to_airport,
          date: Date.now(),
        },
      },
      type: 'review', // type review
      state: 'published',
      user_id: author.id,
      language_id: en.id,
      summary: DESCRIPTION,
    });

    // reviews / testimonials
    await Post.create({
      title: 'Loved the experience FR',
      post_id: 'r3vws2',
      meta: {
        template: 'review',
        review: 'I choose you guys as usual, lorem ipsum dolor sit amet',
        details: {
          from_airport,
          to_airport,
          date: Date.now(),
        },
      },
      type: 'review', // type review
      state: 'published',
      user_id: author.id,
      language_id: fr.id,
      summary: DESCRIPTION,
    });
    
  },
  down: async () => {
    await Post.destroy({ where: { post_id: { $in: ['r3vws', 'r3vws1', 'r3vws2'] } }, force: true, cascade: true });
  },
};
