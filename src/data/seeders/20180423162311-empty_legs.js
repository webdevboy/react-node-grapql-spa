import Promise from 'bluebird';
import path from 'path';
import moment from 'moment';
import { randomBytes } from 'crypto';
import slugify from '../../core/generateSlug';
import {
  SFAircraftModel,
  SFAircraftManufacturer,
  SFAircraftCategory,
  SFAirport,
  Post,
  Term,
  TermTaxonomy,
  MediaLibrary,
  Language,
  User,
  Currency,
  EmptyLeg
} from '../models';
import Sequelize from '../sequelize';

const filename = path.basename(__filename);
const DESCRIPTION = `Auto generated by seed name: ${filename}`;

export default {
  up: async () => {

    const author = await User.findOne();
    // const en = await Language.findOne({ where: { locale: 'en' } });

    const currencyEUR = await Currency.findOne ({where: { currency: "EUR"}});
    const currencyUSD = await Currency.findOne ({where: { currency: "USD"}});
    
    const airportPosts = await Post.findAll({ where : {type: "airport"} });

    await Promise.each(airportPosts, async (airportPost) => {
      
      for (var i = 0; i < 3; ++i) {
        const sfAircraft = await SFAircraftModel.findOne ({order: [Sequelize.fn('RANDOM')]});
        const sfToAirportTo = await SFAirport.findOne ({order: [Sequelize.fn('RANDOM')]});
        const emptyLegFrom = await EmptyLeg.create({
          from_date: "2017-04-17 22:16:11.293",
          until_date: "2019-04-17 22:16:11.293",
          from_airport_sfid: airportPost.meta.airport_sfid,
          to_airport_sfid: sfToAirportTo.sfid,
          aircraft_sfid: sfAircraft.sfid,
          // opportunity_sfid: "unknown-data-seed",
          price: (10000 + Math.random() * 20000).toFixed(0),
          currency_id: currencyEUR.id,
          user_id: author.id,
          published: true,
          details: {
            available_seats: sfAircraft.normal_passenger_seats__c ? sfAircraft.normal_passenger_seats__c : 1
          },
        });
      }
      
      for (var i = 0; i < 3; ++i) {
        const sfToAirportFrom = await SFAirport.findOne ({order: [Sequelize.fn('RANDOM')]});
        const sfAircraft = await SFAircraftModel.findOne ({order: [Sequelize.fn('RANDOM')]});
        const emptyLegTo = await EmptyLeg.create({
          from_date: "2017-04-17 22:16:11.293",
          until_date: "2019-04-17 22:16:11.293",
          from_airport_sfid: sfToAirportFrom.sfid,
          to_airport_sfid: airportPost.meta.airport_sfid,
          aircraft_sfid: sfAircraft.sfid,
          // opportunity_sfid: "unknown-data-seed",
          price: (10000 + Math.random() * 20000).toFixed(0),
          currency_id: currencyUSD.id,
          user_id: author.id,
          published: true,
          details: {
            available_seats: sfAircraft.normal_passenger_seats__c ? sfAircraft.normal_passenger_seats__c : 1
          },
        });
    }
      
    });
  },
  down: async () => {
    
    await EmptyLeg.truncate({
      force: true,
      cascade: true,
    });
  }
};