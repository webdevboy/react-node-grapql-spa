/* eslint-disable */
import Promise from 'bluebird';
import path from 'path';
import moment from 'moment';
import slugify from '../../core/generateSlug';
import { SFAirportCity, Post, User, Language } from '../models';
import Sequelize from '../sequelize';

const filename = path.basename(__filename);
const DESCRIPTION = `Auto generated by seed name: ${filename}`;

export default {
  up: async () => {
    const author = await User.findOne();

    const en = await Language.findOne({ where: { locale: 'en', enabled: true } });
    const fr = await Language.findOne({ where: { locale: 'fr', enabled: true } });

    // private-jet-charter
    const pjc = await Post.create({
      post_id: 'PJT',
      title: 'Private Jet Charter',
      slug: 'private-jet-charter',
      meta: {
        template: 'private-jet-charter',
        childrens: { // pass to the childrens stuff that might be used on admin panel
          suggest_post_type: 'destination',
        },
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'something to test ...',
      language_id: en.id,
    });

    const pjcFr = await Post.create({
      post_id: 'PJT',
      title: 'Private Jet Charter FR',
      slug: 'location-de-jet-prive',
      meta: {
        template: 'private-jet-charter',
        childrens: { // pass to the childrens stuff that might be used on admin panel
          suggest_post_type: 'destination',
        },
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'french something to test ...',
      language_id: fr.id,
    });

    // private-jet-charter/fly-to-city
    const cityTo = await SFAirportCity.findOne({ order: [Sequelize.fn('RANDOM')] });
    const cityToName = cityTo[`name_${fr.locale}__c`];

    await Post.create({
      post_id: 'PJTFLAS',
      title: `Voler Vers ${cityToName}`,
      meta: {
        template: 'private-jet-charter-destination',
        details: {
          city_to: cityTo.id,
        },
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'something to test ...',
      language_id: fr.id,
      parent_id: pjcFr.id,
    });

    await Post.create({
      post_id: 'PJTFLAS',
      title: `Fly To ${cityToName}`,
      meta: {
        template: 'private-jet-charter-destination',
        details: {
          city_to: cityTo.id,
        },
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'something to test ...',
      language_id: en.id,
      parent_id: pjc.id,
    });

    const cityFrom = await SFAirportCity.findOne({ order: [Sequelize.fn('RANDOM')], where: { id: { $not: cityTo.id } } });
    const cityFromName = cityFrom[`name_${en.locale}__c`];
    const between = await Post.create({
      post_id: 'PJTFLA',
      title: `Fly Between ${cityFromName} And ${cityToName}`,
      meta: {
        template: 'private-jet-charter-destination',
        details: {
          city_from: cityFrom.id,
          city_to: cityTo.id,
        },
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'something to test ...',
      language_id: en.id,
      parent_id: pjc.id,
    });

    await Post.create({
      post_id: 'homeID',
      title: `Home`,
      slug: 'home',
      meta: {
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'home page',
      language_id: en.id,
    });

    await Post.create({
      post_id: 'homeID',
      title: `Home`,
      slug: 'home',
      meta: {
        description: 'home avec'
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'home page',
      language_id: fr.id,
    });
	
	await Post.create({
      post_id: 'evgr',
      title: `Evergreen`,
	  slug: 'evergreen',
      meta: {
		template: 'evergreen'
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'evergreen page',
      language_id: en.id,
    });

    await Post.create({
      post_id: 'evgr',
      title: `Evergreen`,
	    slug: 'evergreen',
      meta: {
        template: 'evergreen'
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'evergreen page',
      language_id: fr.id,
    });
	
	await Post.create({
      post_id: 'login',
      title: `Login`,
	    slug: 'login',
      meta: {
		    template: 'login'
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'login page',
      language_id: en.id,
    });
	
	await Post.create({
      post_id: 'login',
      title: `Login`,
	    slug: 'login',
      meta: {
		    template: 'login'
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'login page',
      language_id: fr.id,
    });

    await Post.create({
      post_id: 'cstdsh',
      title: `Customer Area`,
	    slug: 'customer-area',
      meta: {
		    template: 'customer-area'
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'customer area en',
      language_id: en.id,
    });

    await Post.create({
      post_id: 'cstdsh',
      title: `Zone Client`,
	    slug: 'zone-client',
      meta: {
		    template: 'customer-area'
      },
      type: 'page',
      state: 'published',
      user_id: author.id,
      summary: 'customer area fr',
      language_id: fr.id,
    });

    // await post.addTaxonomies([taxonomy, tagTax]);
    // const postTaxonomies = await post.getTaxonomies({
    //   where: { taxonomy: 'post_tag' },
    //   include: [{ model: Term, as: 'Term' }],
    // });
    // console.log(postTaxonomies.map(txo => txo.Term));
    // const taxx = await TermTaxonomy.findOne({ include: [{ model: Term, as: 'Term', where: { slug: 'news' } }] }); // 
    // console.log(taxx);


    /**
     * QUERY TO GET POSTS BASED ON TAXONOMIE/TERM
     * this can go for instance inside evergreen page for the news section
     */
    // const getPostsTag = await TermTaxonomy.findAll({
    //   raw: true,
    //   where: {
    //     taxonomy: 'post_tag', // the taxonomy
    //   },
    //   include: [
    //     {
    //       model: Term,
    //       as: 'Term',
    //       where: {
    //         slug: 'news', // term slug
    //       },
    //     },
    //     {
    //       model: Post,
    //       as: 'Posts',
    //       where: { // post filters
    //         state: 'published',
    //         type: 'post',
    //       },
    //     },
    //   ],
    // });

    // console.log(getPostsTag);
    // const terms = await postTaxonomies.getTerms();
    // console.log(terms);

  },
  down: async () => {
    await Post.destroy({ where: { type: 'page', }, cascade: true, force: true });
    await Post.destroy({ where: { type: 'page', slug: { $iLike: 'private-jet-charter%' }, $or: { 'meta.template': 'private-jet-charter-destination' } }, cascade: true, force: true });
  },
};